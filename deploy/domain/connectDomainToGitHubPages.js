import axios from "axios";
import { Buffer } from "buffer";

const GITHUB_API = "https://api.github.com";
const GITHUB_OWNER = "hellositeai";
const GITHUB_TOKEN = process.env.GITHUB_TOKEN;

/**
 * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π –¥–æ–º–µ–Ω –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é GitHub Pages
 * @param {string} domain - –ù–∞–ø—Ä–∏–º–µ—Ä: 'wooley.hellosite.app'
 * @param {string} repo - –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: 'landing-wooley'
 * @param {string} branch - –í–µ—Ç–∫–∞ –¥–ª—è GitHub Pages (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'main')
 */
export async function connectDomainToGitHubPages(
  domain,
  repo,
  branch = "main"
) {
  const contentUrl = `${GITHUB_API}/repos/${GITHUB_OWNER}/${repo}/contents/CNAME`;
  const pagesUrl = `${GITHUB_API}/repos/${GITHUB_OWNER}/${repo}/pages`;

  let existingSha = null;

  // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ CNAME
  try {
    const res = await axios.get(contentUrl, {
      headers: {
        Authorization: `token ${GITHUB_TOKEN}`,
        Accept: "application/vnd.github.v3+json",
      },
      params: { ref: branch },
    });
    existingSha = res.data.sha;
  } catch (err) {
    if (err.response?.status !== 404) {
      console.error("‚ùå Failed to check existing CNAME:", err.message);
      throw err;
    }
  }

  // –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ CNAME —Ñ–∞–π–ª–∞
  const encodedContent = Buffer.from(domain).toString("base64");

  await axios.put(
    contentUrl,
    {
      message: `Set CNAME to ${domain}`,
      content: encodedContent,
      branch,
      ...(existingSha ? { sha: existingSha } : {}),
    },
    {
      headers: {
        Authorization: `token ${GITHUB_TOKEN}`,
        Accept: "application/vnd.github.v3+json",
      },
    }
  );

  console.log(`‚úÖ Uploaded CNAME: ${domain}`);

  // –®–∞–≥ 3: –í–∫–ª—é—á–∞–µ–º GitHub Pages (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –≤–∫–ª—é—á—ë–Ω)
  try {
    await axios.post(
      pagesUrl,
      {
        source: { branch, path: "/" },
      },
      {
        headers: {
          Authorization: `token ${GITHUB_TOKEN}`,
          Accept: "application/vnd.github.v3+json",
        },
      }
    );
    console.log("‚úÖ GitHub Pages enabled");
  } catch (err) {
    if (err.response?.status === 409) {
      console.log("‚ÑπÔ∏è GitHub Pages already enabled");
    } else {
      console.error("‚ùå Failed to enable GitHub Pages:", err.message);
      throw err;
    }
  }

  // –®–∞–≥ 4: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –¥–æ–º–µ–Ω –∏ HTTPS
  try {
    await axios.patch(
      pagesUrl,
      {
        cname: domain,
        https_enforced: true,
      },
      {
        headers: {
          Authorization: `token ${GITHUB_TOKEN}`,
          Accept: "application/vnd.github.v3+json",
        },
      }
    );
    console.log(`üåê Domain "${domain}" attached to GitHub Pages`);
  } catch (err) {
    if (err.response?.status === 422) {
      console.log("‚ÑπÔ∏è Domain already attached");
    } else {
      console.error("‚ùå Failed to set domain:", err.message);
      throw err;
    }
  }
}
